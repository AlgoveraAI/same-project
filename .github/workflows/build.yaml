# yaml-language-server: $schema=https://json-schema.org/draft-07/schema#
name: Build
on:
  push:
    branches:
      - main
  pull_request_target:
    branches:
      - main
    types:
      - labeled
jobs:
  build:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'ok-to-test')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Install Packages
        run: |
          poetry install --no-root
      - name: Lint Python Files
        run: |
          poetry run flake8 **/*.py
  test:
    runs-on: ubuntu-latest
    if: contains(github.event.pull_request.labels.*.name, 'ok-to-test')
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
          ref: ${{ github.event.pull_request.head.sha }}
      - name: Download env variables
        run: |
          echo "$AZURE_SECRET_BLOB" > ./.env.sh
        shell: bash
        env:
          AZURE_SECRET_BLOB: ${{secrets.AZURE_SECRET_BLOB}}
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install poetry
      - name: Install Packages
        run: |
          poetry install --no-root
      - name: Set up Kubeconfig from Github Secret
        run: |
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBEFLOW_TEST_CLUSTER_KUBECONFIG }}" > $HOME/.kube/config
      - name: Run Tests
        run: |
          set -o pipefail
          mkdir -p artifacts/tests 
          poetry run pytest \
            --junitxml=artifacts/tests/results.xml \
            --cov=./backends \
            --cov=./cli \
            --cov=./objects \
            --cov=./sdk \
            --cov=./clients \
            --cov=./jupyter \
            --cov-report=term \
            --cov-report=xml:artifacts/tests/coverage.xml \
            --cov-report=html:artifacts/tests/coverage.html \
            | tee artifacts/tests/output.txt
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        if: ${{ always() }}
        with:
          name: test-results
          path: artifacts/tests
      - name: Report Test Results
        uses: EnricoMi/publish-unit-test-result-action/composite@v1
        with:
          files: ./artifacts/tests/results.xml
      - name: Report Coverage
        uses: MishaKav/pytest-coverage-comment@main
        with:
          pytest-coverage-path: ./artifacts/tests/output.txt
          junitxml-path: ./artifacts/tests/results.xml
          junitxml-title: Test Summary
